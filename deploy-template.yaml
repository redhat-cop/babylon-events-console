apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: babylon events console
    openshift.io/display-name: Babylon Events Console
    openshift.io/documentation-url: https://github.com/redhat-cop/babylon-events-console/
    openshift.io/long-description: >-
      Deploy the Babylon Events Console
      data is stored on persistent storage.
  name: babylon-events-console

message: |-
  The Babylon events console URL may be found in the ${NAME} route resourec.
  Admin Password:  ${ADMIN_PASSWORD}
  Access Password: ${ACCESS_PASSWORD}

parameters:
- name: NAME
  displayName: Name to apply to template resources
  value: babylon-events-console
  required: true
- name: TEMPLATE_NAME
  displayName: Template Name
  description: >-
    Babylon AgnosticV catalog item template name to provision for users.
  required: true
- name: TEMPLATE_NAMESPACE
  displayName: Template Namespace
  description: >-
    Babylon AgnosticV catalog item template namespace.
  value: openshift
  required: true
- name: TEMPLATE_PARAMETERS
  displayName: Template parameters
  description: >-
    Parameters to pass to template when creating user lab environments.
    Provide parameters as a JSON or YAML dictionary.
  value: '{}'
  required: true
- name: ACCESS_PASSWORD
  displayName: User Access Password
  description: >-
    Optional user access password
- name: ADMIN_PASSWORD
  displayName: Administrative Password
  generate: expression
  from: '[a-zA-Z0-9]{8}'
  required: true
- name: HOSTNAME
  displayName: Route Hostname
  description: >-
    Hostname for events console route.
  required: false
- name: CONSOLE_IMAGE
  displayName: Babylon events console image
  value: quay.io/redhat-cop/babylon-events-console:latest
  required: true
- name: CONSOLE_IMAGE_PULL_POLICY
  value: Always
  required: true
- name: CONSOLE_CPU_LIMIT
  displayName: Redis CPU Limit
  description: >-
    Redis container cpu limit.
  required: true
  value: 500m
- name: CONSOLE_MEMORY_LIMIT
  displayName: Redis Memory Limit
  description: >-
    Redis container memory limit.
  required: true
  value: 512Mi
- name: POOLBOY_DOMAIN
  displayName: Poolboy operator CRD domain
  value: poolboy.gpte.redhat.com
  required: true
- name: REDIS_IMAGE
  displayName: Redis Image
  value: registry.redhat.io/rhscl/redis-32-rhel7:latest
  required: true
- name: REDIS_PASSWORD
  displayName: Redis Database Password
  description: >-
    Password for the Redis database.
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
- name: REDIS_CPU_LIMIT
  displayName: Redis CPU Limit
  description: >-
    Redis container cpu limit.
  required: true
  value: 500m
- name: REDIS_MEMORY_LIMIT
  displayName: Redis Memory Limit
  description: >-
    Redis container memory limit.
  required: true
  value: 512Mi
- name: REDIS_VOLUME_CAPACITY
  displayName: Redis Volume Capacity
  description: >-
    Volume space available for session data, e.g. 512Mi, 2Gi.
  required: true
  value: 1Gi

objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: ${NAME}
  rules:
  - apiGroups:
    - route.openshift.io
    resources:
    - routes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - template.openshift.io
    resources:
    - templates
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ${POOLBOY_DOMAIN}
    resources:
    - resourceclaims
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - watch
    - update

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: ${NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: ${NAME}
  subjects:
  - kind: ServiceAccount
    name: ${NAME}

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
    annotations:
      template.openshift.io/expose-access_password: "{.data['access_password']}"
      template.openshift.io/expose-admin_password: "{.data['admin_password']}"
      template.openshift.io/expose-redis_password: "{.data['redis_password']}"
  stringData:
    access_password: ${ACCESS_PASSWORD}
    admin_password: ${ADMIN_PASSWORD}
    redis_password: ${REDIS_PASSWORD}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${REDIS_VOLUME_CAPACITY}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${NAME}
  spec:
    selector:
      matchLabels:
        app: ${NAME}
        component: console
    replicas: 1
    template:
      metadata:
        labels:
          app: ${NAME}
          component: console
      spec:
        serviceAccountName: ${NAME}
        containers:
        - name: babylon-events-console
          env:
          - name: ACCESS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: access_password
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: admin_password
          - name: POOLBOY_DOMAIN
            value: ${POOLBOY_DOMAIN}
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}
                key: redis_password
          - name: REDIS_SERVER
            value: ${NAME}-redis:6379
          - name: TEMPLATE_NAME
            value: ${TEMPLATE_NAME}
          - name: TEMPLATE_NAMESPACE
            value: ${TEMPLATE_NAMESPACE}
          - name: TEMPLATE_PARAMETERS
            value: ${TEMPLATE_PARAMETERS}
          image: ${CONSOLE_IMAGE}
          imagePullPolicy: ${CONSOLE_IMAGE_PULL_POLICY}
          ports:
          - containerPort: 8080
          resources:
            limits:
              cpu: ${CONSOLE_CPU_LIMIT}
              memory: ${CONSOLE_MEMORY_LIMIT}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${NAME}-redis
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${NAME}
        component: redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${NAME}
          component: redis
      spec:
        containers:
        - name: redis
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis_password
                name: ${NAME}
          image: ${REDIS_IMAGE}
          imagePullPolicy: Always
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${REDIS_CPU_LIMIT}
              memory: ${REDIS_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: data
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: ${NAME}-redis

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    ports:
    - name: app
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${NAME}
      component: console
    type: ClusterIP

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}-redis
  spec:
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: ${NAME}
      component: redis
    type: ClusterIP

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${HOSTNAME}
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${NAME}
